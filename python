import hashlib
from cryptography.fernet import Fernet

def encrypt_text(text, key):
    salt = hashlib.sha256(key.encode()).digest()
    cipher = Fernet(salt)
    encrypted_text = cipher.encrypt(text.encode())
    return encrypted_text

def decrypt_text(encrypted_text, key):
    salt = hashlib.sha256(key.encode()).digest()
    cipher = Fernet(salt)
    decrypted_text = cipher.decrypt(encrypted_text).decode()
    return decrypted_text

print("文本加密和解密命令行工具")

while True:
    print("\n请选择操作：")
    print("1. 加密文本")
    print("2. 解密文本")
    print("3. 退出程序")

    choice = input("请选择操作（输入数字）：")

    if choice == '3':
        print("谢谢使用，再见！")
        break

    text = input("请输入要处理的文本：")
    key = input("请输入密钥：")

    if choice == '1':
        encrypted_text = encrypt_text(text, key)
        print("加密后的文本：", encrypted_text)
    elif choice == '2':
        decrypted_text = decrypt_text(text, key)
        print("解密后的文本：", decrypted_text)
    else:
        print("无效的选择，请重新输入。")
//以上代码是一个简单的文本加密和解密命令行工具。应用程序使用 cryptography 库来提供加密和解密功能。用户可以选择加密文本或解密文本，并提供相应的文本和密钥。

//encrypt_text() 函数使用提供的密钥对文本进行加密，并返回加密后的文本。decrypt_text() 函数使用提供的密钥对加密后的文本进行解密，并返回解密后的文本。

//应用程序使用一个无限循环来等待用户输入操作和相应的文本及密钥，并根据用户选择执行相应的加密或解密操作。用户可以选择退出程序来结束应用程序的运行。

//请注意，这只是一个简单的示例，使用了 cryptography 库提供的 Fernet 加密算法。在实际项目中，您可能需要考虑更多的加密算法和安全性方面的考虑，以实现更强大和安全的文本加密和解密工具。
